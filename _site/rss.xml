<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>BoxCn's Blog - 盒子的个人博客</title>
        <description>BoxCn's Blog - 盒子的个人博客 - 盒子</description>
        <link>http://boxcn.github.io</link>
        <link>http://boxcn.github.io</link>
        <lastBuildDate>2015-01-10T17:40:13+08:00</lastBuildDate>
        <pubDate>2015-01-10T17:40:13+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Java MVC设计模式</title>
                <description>&lt;p&gt;&lt;strong&gt;MVC(Model View Control)模型－视图－控制器&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pictures/Java/Java_MVC_1.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mvc&quot;&gt;一、MVC与模板概念的理解&lt;/h4&gt;

&lt;p&gt;MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据你可以分别用柱状图、饼图来表示。C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。&lt;/p&gt;

&lt;p&gt;模型－视图－控制器（MVC）是Xerox PARC在八十年代为编程语言Smalltalk－80发明的一种软件设计模式，至今已被广泛使用。最近几年被推荐为Sun公司J2EE平台的设计模式，并且受到越来越多的使用 ColdFusion 和 PHP 的开发者的欢迎。模型－视图－控制器模式是一个有用的工具箱，它有很多好处，但也有一些缺点。 &lt;/p&gt;

&lt;h4 id=&quot;mvc-1&quot;&gt;二、MVC如何工作&lt;/h4&gt;

&lt;p&gt;MVC是一个设计模式，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。 &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;视图 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;视图是用户看到并与之交互的界面。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Macromedia Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services. &lt;/p&gt;

&lt;p&gt;如何处理应用程序的界面变得越来越有挑战性。MVC一个大的好处是它能为你的应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。 &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;模型 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;模型表示企业数据和业务规则。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。 &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;控制器 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;控制器接受用户的输入并调用模型和视图去完成用户的需求。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后用确定用哪个视图来显示模型处理返回的数据。 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pictures/Java/Java_MVC_2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在我们总结MVC的处理过程，首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。&lt;/p&gt;

&lt;h4 id=&quot;mvc-2&quot;&gt;三、为什么要使用 MVC&lt;/h4&gt;

&lt;p&gt;大部分Web应用程序都是用像ASP，PHP，或者CFML这样的过程化语言来创建的。它们将像数据库查询语句这样的数据层代码和像HTML这样的表示层代码混在一起。经验比较丰富的开发者会将数据从表示层分离开来，但这通常不是很容易做到的，它需要精心的计划和不断的尝试。MVC从根本上强制性的将它们分开。尽管构造MVC应用程序需要一些额外的工作，但是它给我们带来的好处是无庸质疑的。&lt;/p&gt;

&lt;p&gt;首先，最重要的一点是多个视图能共享一个模型，现在需要用越来越多的方式来访问你的应用程序。对此，其中一个解决之道是使用MVC，无论你的用户想要Flash界面或是 WAP 界面；用一个模型就能处理它们。由于你已经将数据和业务规则从表示层分开，所以你可以最大化的重用你的代码了。&lt;/p&gt;

&lt;p&gt;由于模型返回的数据没有进行格式化，所以同样的构件能被不同界面使用。例如，很多数据可能用HTML来表示，但是它们也有可能要用Macromedia Flash和WAP来表示。模型也有状态管理和数据持久性处理的功能，例如，基于会话的购物车和电子商务过程也能被Flash网站或者无线联网的应用程序所重用。&lt;/p&gt;

&lt;p&gt;因为模型是自包含的，并且与控制器和视图相分离，所以很容易改变你的应用程序的数据层和业务规则。如果你想把你的数据库从MySQL移植到Oracle，或者改变你的基于RDBMS数据源到LDAP，只需改变你的模型即可。一旦你正确的实现了模型，不管你的数据来自数据库或是LDAP服务器，视图将会正确的显示它们。由于运用MVC的应用程序的三个部件是相互独立，改变其中一个不会影响其它两个，所以依据这种设计思想你能构造良好的松偶合的构件。&lt;/p&gt;

&lt;p&gt;对我来说，控制器的也提供了一个好处，就是可以使用控制器来联接不同的模型和视图去完成用户的需求，这样控制器可以为构造应用程序提供强有力的手段。给定一些可重用的模型和视图，控制器可以根据用户的需求选择模型进行处理，然后选择视图将处理结果显示给用户。&lt;/p&gt;

&lt;h4 id=&quot;mvc-3&quot;&gt;四、MVC的缺点&lt;/h4&gt;

&lt;p&gt;MVC的缺点是由于它没有明确的定义，所以完全理解MVC并不是很容易。使用MVC需要精心的计划，由于它的内部原理比较复杂，所以需要花费一些时间去思考。&lt;/p&gt;

&lt;p&gt;你将不得不花费相当可观的时间去考虑如何将MVC运用到你的应用程序，同时由于模型和视图要严格的分离，这样也给调试应用程序到来了一定的困难。每个构件在使用之前都需要经过彻底的测试。一旦你的构件经过了测试，你就可以毫无顾忌的重用它们了。&lt;/p&gt;

&lt;p&gt;根据开发者经验，由于开发者将一个应用程序分成了三个部件，所以使用MVC同时也意味着你将要管理比以前更多的文件，这一点是显而易见的。这样好像我们的工作量增加了，但是请记住这比起它所能带给我们的好处是不值一提。&lt;/p&gt;

&lt;p&gt;MVC并不适合小型甚至中等规模的应用程序，花费大量时间将MVC应用到规模并不是很大的应用程序通常会得不偿失。&lt;/p&gt;

&lt;h4 id=&quot;mvc-4&quot;&gt;五、MVC是一条创建软件的好途径&lt;/h4&gt;

&lt;p&gt;MVC设计模式是一个很好创建软件的途径，它所提倡的一些原则，像内容和显示互相分离可能比较好理解。但是如果你要隔离模型、视图和控制器的构件，你可能需要重新思考你的应用程序，尤其是应用程序的构架方面。如果你肯接受MVC，并且有能力应付它所带来的额外的工作和复杂性，MVC将会使你的软件在健壮性，代码重用和结构方面上一个新的台阶。&lt;/p&gt;
</description>
                <link>http://boxcn.github.io/tools/2014-01-10/Java-MVC-Mode.html</link>
                <guid>http://boxcn.github.io/tools/2014-01-10/Java-MVC-Mode</guid>
                <pubDate>2014-01-10T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Github简介</title>
                <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/&quot; title=&quot;Github官网&quot;&gt;GitHub&lt;/a&gt;&lt;/strong&gt; is a web-based hosting service for projects that use the Gitrevision control system. It is written using &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=qBhCo53ZRao1p-YEm7mTn3gXqTilyuv46WkV2mqp4z6Uf-87c6iMQ34vBpHIScS0yFe1uCzWJ8kyz06GFOKMUK&quot;&gt;Ruby on Rails&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; by Logical Awesome developers Chris Wanstrath, PJ Hyett, and Tom Preston-Werner. GitHub offers both commercial plans and free accounts for open source projects. According to the Git User’s Survey in 2009, GitHub is the most popular Git hosting site.&lt;/p&gt;

&lt;p&gt;要了解 &lt;a href=&quot;https://github.com/&quot; title=&quot;Github官网&quot;&gt;GitHub&lt;/a&gt;，我们首先要知道 &lt;a href=&quot;http://baike.baidu.com/subview/1531489/12032478.htm&quot;&gt;Git&lt;/a&gt;，&lt;a href=&quot;http://baike.baidu.com/subview/1531489/12032478.htm&quot;&gt;Git&lt;/a&gt; 是管理代码的工具，写代码不是件轻松的事儿，一个人写的时候已经不轻松了，一群人写就更不轻松了，但这世界上很多事都是怎么不轻松怎么来的，大部分人都会 和别人一起写代码，问题在于，这么多人写一个东西，你今天写一点，我明天写一点，然后发现你写错了，又影响到了我前天写的，最后汇总的时候怎么查找错误？ 又在什么时候汇总？这些问题太多了，想想就觉得还是食物美好。为了让写代码这件事儿美好一点，我们有了一种名叫代码管理的东西，&lt;a href=&quot;http://baike.baidu.com/subview/1531489/12032478.htm&quot;&gt;Git&lt;/a&gt; 正是其中之一，我使用过的还有 SVN，但是今天我们只讲 &lt;a href=&quot;http://baike.baidu.com/subview/1531489/12032478.htm&quot;&gt;Git&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/subview/1531489/12032478.htm&quot;&gt;Git&lt;/a&gt; 的核心思想是『分布式』，我们在服务器上面有一个『主仓库』，这里放的是拿得出台面的代码，我们也可以在自己的电脑上创建分支，这些分支由『主仓库』克隆 而来，然后我们就可以愉快的在自己的电脑上写代码了，写完代码可以同步在自己电脑的分支里面，当你觉得自己的代码拿得出台面，我们可以申请把自己的代码更 新到『主仓库』里面，一旦通过这样的审核，我们就对『主仓库』做了某种贡献，世界各地的杰出程序员不断的为一个项目的『主仓库』做贡献，让这个项目变得越 来越完善。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 是运用 &lt;a href=&quot;http://baike.baidu.com/subview/1531489/12032478.htm&quot;&gt;Git&lt;/a&gt; 思想来工作的一个商业网站，所有开发者都可以在 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 上面为自己的项目创建一个『主仓库』，好的项目就像狼群中的小鲜肉一样，大量的开发者会把这个主仓库中的代码克隆到自己的『分仓库』去，用更性感的话来 说，就是『Fork』。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/subview/1531489/12032478.htm&quot;&gt;Git&lt;/a&gt; 的方式的确很优雅，但问题在于，会有人愿意把自己辛辛苦苦的代码拿出来公布，并且让人 Fork 么？&lt;/p&gt;

&lt;p&gt;会，不仅会，而且很多，&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 有超过 140 万用户，你可能会撇撇嘴说那个啥啥社交软件都有 2000 万用户，区区 140 万算个啥。可是这 140 万用户几乎涵盖了这个世界上最优秀的开发者，我相信，你那个有 2000W 用户的社交软件的工程师，肯定也是用 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 的。任何项目，在 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 上面获得 fork 或 star，都意味着其它工程师对这个项目的认可，这比 100 个 QQ 空间的赞更有价值。
&lt;img src=&quot;/assets/pictures/Tools/the_github_user.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么这些优秀的工程师会开源自己的项目？&lt;/p&gt;

&lt;p&gt;因为开源是一种精神。&lt;/p&gt;

&lt;p&gt;无数的软件开发者苦心积虑保护自己的代码不被破解，而还是被聪明绝顶的脚本小子破解了，但破解无数软件的脚本小子在接下来的破解中却傻眼了，因为这是开源的，不用破解也就破解了破解。&lt;/p&gt;

&lt;p&gt;闭源意味着封闭，而开源则意味着开放，封闭很难进步，开放才会进步。开放让人类的智慧有聚集的可能，人类的智慧聚集起来不再是1+1=2，这是 开源的力量。闭源是一种排斥，而开源是包容，闭源是单打独斗，开源是同仇敌忾，闭源是敝帚自珍，开源是无私奉献，闭源是小富即安，开源是世界大同，闭源是 资本主义，开源是共产主义。&lt;/p&gt;

&lt;p&gt;闭源让微软成帝国，让苹果成神话，但是，这是商业，如果没有技术的开源，这些商业的闭源也基本是无米之炊。商业需要闭源，而技术需要开源，利益需要闭源，而情怀需要开源。&lt;/p&gt;

&lt;p&gt;开源是技术的『本善』。&lt;/p&gt;

&lt;p&gt;我不排斥闭源，但是我赞美开源，就像我我忍受黑暗，但却心存光明一样，就像我顿顿吃素，却依然热爱肉食一样。当然，我没有顿顿吃素。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;其他参考资料：&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.worldhello.net/gotgithub/index.html&quot; title=&quot;gotgithub&quot;&gt;GotGitHub的介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://marklodato.github.io/visual-git-guide/index-zh-cn.html&quot; title=&quot;图解Git&quot;&gt;图解Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot; title=&quot;Git - 简易指南(小清新风格，简单易懂)&quot;&gt;Git - 简易指南(小清新风格，简单易懂)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                <link>http://boxcn.github.io/tools/2014-01-10/AboutGithub.html</link>
                <guid>http://boxcn.github.io/tools/2014-01-10/AboutGithub</guid>
                <pubDate>2014-01-10T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
